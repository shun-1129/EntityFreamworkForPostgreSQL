// <auto-generated />
using System;
using EntityFreamworkForPostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EntityFreamworkForPostgreSQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntityFreamworkForPostgreSQL.Entities.Master.UserMaster", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("ユーザマスタID:【値例】1");

                    b.Property<string>("CreateProgram")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("create_program")
                        .HasComment("作成プログラム:【値例】System");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("create_user")
                        .HasComment("作成者:【値例】System");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasComment("作成日時:【値例】2025/04/09 10:00:00");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("論理削除:【値例】false：未削除 , true：削除済み");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name")
                        .HasComment("名称:【値例】管理者");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasComment("更新日時:【値例】2025/04/09 10:00:00");

                    b.Property<string>("UpdateProgram")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("update_program")
                        .HasComment("更新プログラム:【値例】System");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("update_user")
                        .HasComment("更新者:【値例】System");

                    b.HasKey("Id");

                    b.ToTable("m_user", t =>
                        {
                            t.HasComment("ユーザマスタ");
                        });
                });

            modelBuilder.Entity("EntityFreamworkForPostgreSQL.Entities.System.EmailAddressDomainSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("ドメインID:【値例】1");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateProgram")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("create_program")
                        .HasComment("作成プログラム:【値例】System");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("create_user")
                        .HasComment("作成者:【値例】System");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasComment("作成日時:【値例】2025/04/09 10:00:00");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("domain")
                        .HasComment("ドメイン:【値例】管理者");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted")
                        .HasComment("論理削除:【値例】false：未削除 , true：削除済み");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasComment("更新日時:【値例】2025/04/09 10:00:00");

                    b.Property<string>("UpdateProgram")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("update_program")
                        .HasComment("更新プログラム:【値例】System");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("update_user")
                        .HasComment("更新者:【値例】System");

                    b.HasKey("Id");

                    b.ToTable("s_email_address_domain", t =>
                        {
                            t.HasComment("メールアドレスドメインシステムテーブル");
                        });
                });

            modelBuilder.Entity("EntityFreamworkForPostgreSQL.Entities.Transaction.UserTransaction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigserial")
                        .HasColumnName("id")
                        .HasComment("ユーザID:【値例】1");

                    b.Property<string>("CreateProgram")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("create_program")
                        .HasComment("作成プログラム:【値例】System");

                    b.Property<string>("CreateUser")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("create_user")
                        .HasComment("作成者:【値例】System");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasComment("作成日時:【値例】2025/04/09 10:00:00");

                    b.Property<string>("EMailAddress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("email_address")
                        .HasComment("メールアドレス:【値例】abcdefg");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("first_name")
                        .HasComment("名:【値例】太郎");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("last_name")
                        .HasComment("姓:【値例】伊藤");

                    b.Property<int>("MUserId")
                        .HasColumnType("integer")
                        .HasColumnName("m_user_id")
                        .HasComment("ユーザマスタID:【値例】1");

                    b.Property<int>("SEmailAddressDomainId")
                        .HasColumnType("integer")
                        .HasColumnName("s_email_address_domain_id")
                        .HasComment("メールアドレスドメインID:【値例】1");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasComment("更新日時:【値例】2025/04/09 10:00:00");

                    b.Property<string>("UpdateProgram")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("update_program")
                        .HasComment("更新プログラム:【値例】System");

                    b.Property<string>("UpdateUser")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("update_user")
                        .HasComment("更新者:【値例】System");

                    b.HasKey("Id");

                    b.ToTable("t_user", t =>
                        {
                            t.HasComment("ユーザテーブル");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
